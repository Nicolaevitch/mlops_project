version: '3.8'

services:

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7

  airflow:
    build:
      context: ./airflow
      dockerfile: Dockerfile

    restart: always
    depends_on:
      - postgres
      - redis
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__FERNET_KEY: gpndZWY8UrbgYPFgar5CvKk05GWDwOcw1dYCEESrcEo=
      AIRFLOW__WEBSERVER__SECRET_KEY: super_secret_key_1234567890

    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./src/ml:/app
    ports:
      - "8080:8080"
    command: >
      bash -c "
        airflow db init &&
        airflow users create --username admin --password admin --firstname Air --lastname Flow --role Admin --email admin@example.com &&
        airflow webserver
      "
  airflow-scheduler:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - postgres
      - redis
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__FERNET_KEY: gpndZWY8UrbgYPFgar5CvKk05GWDwOcw1dYCEESrcEo=
      AIRFLOW__WEBSERVER__SECRET_KEY: super_secret_key_1234567890

    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./src/ml:/app
      - ./data:/app/data   # ✅ ajoute ceci

    command: bash -c "airflow scheduler"

  mysql:
    image: mysql:8
    restart: always
    environment:
      MYSQL_DATABASE: plants_db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: root
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql

  minio:
    image: minio/minio
    restart: always
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data

  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.0.1
    restart: always
    environment:
      GUNICORN_CMD_ARGS: "--timeout 60"
    ports:
      - "5002:5001"
    command: mlflow server --host 0.0.0.0 --port 5001

  ml-train:
    build:
      context: ./src/ml
      dockerfile: Dockerfile
    volumes:
      - ./src/ml:/app
      - ./data:/app/data
    environment:
      AWS_S3_ENDPOINT: "http://minio:9000"
      AWS_ACCESS_KEY_ID: "minioadmin"
      AWS_SECRET_ACCESS_KEY: "minioadmin"
    depends_on:
      - minio
    command: tail -f /dev/null

  api:
    build:
      context: ./src/api
      dockerfile: Dockerfile
    ports:
      - "8000:80"
    environment:
      MODEL_PATH: /app/model.pth
    volumes:
      - ./src/api:/app

  streamlit:
    build:
      context: ./src/app
      dockerfile: Dockerfile
    ports:
      - "8501:8501"
    volumes:
      - ./src/app:/app
      - ./src/ml/temp_model:/app/temp_model   # ✅ modèle monté dans un sous-dossier
    depends_on:
      - ml-train



volumes:
  mysql_data:
  minio_data:
  postgres_data:

